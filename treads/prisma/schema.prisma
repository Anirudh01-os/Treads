// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth models (NextAuth)
model User {
	id            String    @id @default(cuid())
	name          String?
	email         String?   @unique
	emailVerified DateTime?
	image         String?
	role          Role      @default(USER)

	accounts      Account[]
	sessions      Session[]
	profile       Profile?
	items         Item[]
	likes         Like[]
	outfits       Outfit[]
	recommendSignals RecommendationSignal[]
	calendarEvents CalendarEvent[]
}

model Account {
	id                String  @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
	id         String   @id @default(cuid())
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}

enum Role {
	USER
	ADMIN
}

// App domain models
model Profile {
	id            String   @id @default(cuid())
	userId        String   @unique
	bodyHeightCm  Int?
	bodyWeightKg  Int?
	faceShape     String?
	skinUndertone String?
	hairType      String?
	fitPrefs      Json?

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
	id          String   @id @default(cuid())
	userId      String
	title       String
	description String?
	imageUrl    String
	originalUrl String?
	type        ItemType
	color       String?
	season      String?
	material    String?
	tags        ItemTag[]
	embedding   Json?     // CLIP vector as JSON array
	createdAt   DateTime  @default(now())
	updatedAt   DateTime  @updatedAt

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	// Back-relations
	outfitItems OutfitItem[]
	likes       Like[]
}

enum ItemType {
	TOP
	BOTTOM
	OUTERWEAR
	SHOES
	ACCESSORY
}

model Tag {
	id    String   @id @default(cuid())
	name  String   @unique
	items ItemTag[]
}

model ItemTag {
	itemId String
	tagId  String

	item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
	tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

	@@id([itemId, tagId])
}

model Outfit {
	id        String       @id @default(cuid())
	userId    String
	name      String
	notes     String?
	items     OutfitItem[]
	imageUrl  String?
	createdAt DateTime     @default(now())

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	// Back-relations
	likes          Like[]
	calendarEvents CalendarEvent[]
}

model OutfitItem {
	outfitId String
	itemId   String
	role     String? // e.g., "top", "bottom"

	outfit Outfit @relation(fields: [outfitId], references: [id], onDelete: Cascade)
	item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

	@@id([outfitId, itemId])
}

model Like {
	id        String   @id @default(cuid())
	userId    String
	itemId    String?
	outfitId  String?
	isLike    Boolean  @default(true)
	createdAt DateTime @default(now())

	user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
	item   Item?  @relation(fields: [itemId], references: [id])
	outfit Outfit? @relation(fields: [outfitId], references: [id])
}

model RecommendationSignal {
	id        String   @id @default(cuid())
	userId    String
	context   Json?
	createdAt DateTime @default(now())

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
	id          String   @id @default(cuid())
	userId      String
	date        DateTime
	title       String
	status      String? // iron/clean/alter or worn
	outfitId    String?
	reminderAt  DateTime?

	user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
	outfit Outfit? @relation(fields: [outfitId], references: [id])
}
