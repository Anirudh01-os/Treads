// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum Role {
  USER
  ADMIN
}

enum ItemType {
  TOP
  BOTTOM
  OUTERWEAR
  SHOES
  ACCESSORY
}

// --- Models ---

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts Account[]
  sessions Session[]
  items    WardrobeItem[]
  outfits  Outfit[]
  profile  Profile?
  events   WardrobeEvent[]
  feedback Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id               String  @id @default(cuid())
  userId           String  @unique
  bodyMeasurements Json? // { heightCm, chestCm, waistCm, hipsCm }
  faceShape        String? // user-selected
  skinUndertone    String? // cool/warm/neutral
  hairType         String?
  fitPreferences   Json? // arbitrary prefs

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WardrobeItem {
  id          String       @id @default(cuid())
  userId      String
  title       String
  description String?
  type        ItemType
  colors      String[] // list of color names
  season      String[] // e.g. ["spring","summer"]
  material    String?
  imageUrl    String
  maskUrl     String? // bg-removed/segmented asset
  arAssetUrl  String? // optional AR plane or GLB
  tags        TagOnItem[]
  embedding   Embedding?
  outfitItems OutfitItem[]
  feedbacks   Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String      @id @default(cuid())
  name  String      @unique
  items TagOnItem[]
}

model TagOnItem {
  itemId String
  tagId  String

  item WardrobeItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag  Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
}

model Outfit {
  id          String          @id @default(cuid())
  userId      String
  title       String
  occasion    String? // work/date/travel/festive
  liked       Boolean         @default(false)
  disliked    Boolean         @default(false)
  items       OutfitItem[]
  snapshotUrl String?
  events      WardrobeEvent[]
  feedbacks   Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OutfitItem {
  outfitId String
  itemId   String
  slot     String // top/bottom/outerwear/shoes/accessory

  outfit Outfit       @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  item   WardrobeItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([outfitId, itemId])
}

model WardrobeEvent {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime
  title    String
  notes    String?
  outfitId String?
  reminder String? // e.g. "iron", "clean", "alter"

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfit Outfit? @relation(fields: [outfitId], references: [id])

  @@index([userId, date])
}

model Embedding {
  id        String       @id @default(cuid())
  itemId    String       @unique
  // Store CLIP or similar embedding as JSON (array of numbers)
  vector    Json
  model     String
  dims      Int
  createdAt DateTime     @default(now())
  item      WardrobeItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  outfitId  String?
  itemId    String?
  signal    String // like/dislike/skip
  reason    String?
  context   Json? // additional metadata
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfit Outfit?       @relation(fields: [outfitId], references: [id])
  item   WardrobeItem? @relation(fields: [itemId], references: [id])
}

model ShopItem {
  id         String   @id @default(cuid())
  title      String
  brand      String?
  priceCents Int
  currency   String   @default("USD")
  url        String
  imageUrl   String
  type       ItemType
  colors     String[]
  material   String?
  season     String[]
  embedding  Json?
  createdAt  DateTime @default(now())
}
